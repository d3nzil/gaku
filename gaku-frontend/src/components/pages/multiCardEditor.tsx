import { useState, useEffect } from 'react';
import { SingleValue } from 'react-select';
import api from "../../services/api";
import Select from 'react-select';
import getEntryComponent from '../cards/CardView';
import { VocabEntry, KanjiEntry, RadicalEntry, CardType } from '../../types/CardTypes';
import MultiCardEntryComponent from '../cards/MultiCard';
type MultiCardEntry = import('../../types/CardTypes').MultiCardEntry;
type CardFilter = import('../../types/CardTypes').CardFilter;
import IMEInput from '../IMEInput';
import { CardSource } from '../../types/CardTypes';


const MultiCardEditor = () => {
    const [currentMultiCard, setCurrentMultiCard] = useState<MultiCardEntry | null>(null);
    const [multiCardType, setMultiCardType] = useState<'VOCABULARY' | 'KANJI' | 'RADICAL'>('KANJI');
    const [cardSearchText, setCardSearchText] = useState<string>('');
    const [cardSearchResults, setCardSearchResults] = useState<(VocabEntry | KanjiEntry | RadicalEntry)[]>([]);
    const [multiCardSearchResults, setMultiCardSearchResults] = useState<MultiCardEntry[]>([]);

    const [availableSources, setAvailableSources] = useState<CardSource[]>([]);
    const [selectedSources, setSelectedSources] = useState<CardSource[]>([]);

    // initialize the multi card editor
    useEffect(() => {
        document.title = "Gaku - Multi Card Editor";
    }, []);


    // get the available sources
    useEffect(() => {
        api.getSources().then((sources) => {
            setAvailableSources(sources);
        });
    }, []);


    const getSourceLabel = (source_id: string) => {
        const source = availableSources.find((source) => source.source_id === source_id);
        // label should be source_name + source_section, separated by a dash
        return source ? `${source.source_name} - ${source.source_section}` : source_id;
    }


    // update 
    const newCard = () => {
        // create an empty multi card entry
        setCurrentMultiCard({
            card_id: '',
            writing: '<will be autogenerated>',
            note: '',
            hint: '',
            test_readings: true,
            test_meanings: true,
            card_type: 'MULTI_CARD',
            multicard_type: multiCardType,
            card_ids: [],
            cards: [],
        });
    }
    const discardCurrentCard = () => {
        setCurrentMultiCard(null);
        // also clear search
        setCardSearchText('');
        setCardSearchResults([]);
    }

    const searchCards = async () => {
        const filter: CardFilter = {
            card_types: [currentMultiCard!.multicard_type as CardType],
            card_sources: [],
            search_text: cardSearchText,
            start_index: null,
            num_cards: 10,
        }

        const results = await api.getCardsByText(filter);
        // get only results matching selected card type
        const filtered_search: (VocabEntry | KanjiEntry | RadicalEntry)[] = results.filter((card): card is VocabEntry | KanjiEntry | RadicalEntry => card.card_type === currentMultiCard!.multicard_type);

        setCardSearchResults(filtered_search);
    }

    const searchMultiCardCards = async () => {
        const filter: CardFilter = {
            card_types: [CardType.MULTI_CARD],
            card_sources: [],
            search_text: cardSearchText,
            start_index: null,
            num_cards: 10,
        }

        const results = await api.getCardsByText(filter);
        // get only results matching selected card type
        const filtered_search: (MultiCardEntry)[] = results.filter((card): card is MultiCardEntry => card.card_type === 'MULTI_CARD');

        setMultiCardSearchResults(filtered_search);
    }

    const addCardToMultiCard = (card: VocabEntry | KanjiEntry | RadicalEntry) => {
        if (currentMultiCard)
        {
            const updatedCard = { ...currentMultiCard };
            updatedCard.cards.push(card);
            updatedCard.card_ids.push(card.card_id);
            setCurrentMultiCard(updatedCard);
        }
    }

    const editMultiCard = (card: MultiCardEntry) => {
        setCurrentMultiCard(card);
    }

    const saveMultiCard = async () => {
        if (currentMultiCard)
        {
            if (currentMultiCard.card_id)
            {
                await api.updateCard(currentMultiCard);
            } else
            {
                const response = await api.addCard(currentMultiCard);
                currentMultiCard.card_id = response.card_id;
            }
            // Update card sources
            selectedSources.map(async (source) => {
                await api.addCardSourceLink(currentMultiCard.card_id, source.source_id);
            });
            // clear the current card
            setCurrentMultiCard(null);
        }
    }



    return (
        <div style={{ display: "flex", justifyContent: "center", width: "100%" }}>
            <div style={{ maxWidth: "40em", width: "100%", display: "flex", flexDirection: "column", gap: "0.25em" }}>
                <h2>Multi Card Editor</h2>
                <div style={{ border: "1px solid grey", padding: "0.5em", borderRadius: "0.5em" }}>
                    <h4 style={{ margin: "0 0", padding: "0.5em 0" }}>Create a new Multi Card:</h4>
                    Select Multi Card Type:
                    <Select
                        options={[
                            { value: 'VOCABULARY', label: 'Vocabulary' },
                            { value: 'KANJI', label: 'Kanji' },
                            { value: 'RADICAL', label: 'Radical' },
                        ]}
                        onChange={(selected: SingleValue<{ value: 'VOCABULARY' | 'KANJI' | 'RADICAL'; label: string }>) => setMultiCardType(selected!.value)}
                        className='react-select'
                    />
                    <button onClick={newCard}>New Multi Card</button>
                </div>
                <div>
                    {currentMultiCard && (
                        <div style={{ border: "1px solid grey", padding: "0.5em", borderRadius: "0.5em" }}>
                            <MultiCardEntryComponent
                                entry={currentMultiCard}
                                onEntryChange={setCurrentMultiCard}
                            />

                            <div style={{ display: 'flex', gap: "0.5em" }}>
                                <div style={{ flex: 1.5 }}>
                                    {/* select sources to study */}
                                    <b>Select sources</b>
                                    <Select
                                        isMulti
                                        options={availableSources.map((source) => ({ value: source, label: getSourceLabel(source.source_id) }))}
                                        value={selectedSources.map((source) => ({ value: source, label: getSourceLabel(source.source_id) }))}
                                        onChange={(selected) => setSelectedSources(selected.map((source) => source.value))}
                                        className='react-select'
                                    />
                                </div>

                            </div>

                            <button onClick={saveMultiCard}>Save Multi Card</button>
                            <button onClick={() => discardCurrentCard()}>Discard current card</button>
                        </div>
                    )}
                </div>
                {currentMultiCard ? (
                    <div style={{ border: "1px solid grey", padding: "0.5em", borderRadius: "0.5em" }}>
                        <h4 style={{ margin: "0 0", padding: "0.5em 0" }}>Search for a {currentMultiCard!.multicard_type} card to edit:</h4><br />
                        <IMEInput value={cardSearchText} onChange={setCardSearchText} />
                        <button onClick={() => {
                            searchCards();
                        }}>Search</button>

                        <br />
                        <div style={{ display: 'flex', flexDirection: 'column', gap: '1em' }}>
                            <b>Search results:</b>

                            {cardSearchResults.map((card, index) => (
                                <div key={index}>
                                    <button onClick={() => { addCardToMultiCard(card); }}>Add {card.writing} to MultiCard</button>
                                    {getEntryComponent(card, () => { })}
                                    <hr />
                                </div>
                            ))}
                        </div>
                    </div>
                ) : (
                    <div style={{ border: "1px solid grey", padding: "0.5em", borderRadius: "0.5em" }}>
                        <h4 style={{ margin: "0 0", padding: "0.5em 0" }}>Search for a MultiCard card to edit</h4>
                        <IMEInput value={cardSearchText} onChange={setCardSearchText} />
                        <button onClick={() => {
                            searchMultiCardCards();
                        }}>Search</button>

                        <br />
                        <div style={{ display: 'flex', flexDirection: 'column', gap: '1em' }}>
                            <b>Search results:</b>

                            {multiCardSearchResults.map((card, index) => (
                                <div key={index}>
                                    <button onClick={() => { editMultiCard(card); }}>Edit {card.writing} MultiCard</button>
                                    {getEntryComponent(card, () => { })}
                                    <hr />
                                </div>
                            ))}
                        </div>

                    </div>
                )}
            </div>
        </div >
    );
}

export default MultiCardEditor;